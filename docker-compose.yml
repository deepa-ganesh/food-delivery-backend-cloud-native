services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.2
    container_name: logstash
    ports:
      - "5001:5001"
    volumes:
      - ./logstash/docker/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash/docker/logstash.yml:/usr/share/logstash/config/logstash.yml
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    depends_on:
      - elasticsearch

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    ports:
      - "4318:4318"
    volumes:
      - ./otelcol/docker/otel-collector-config.yml:/etc/otelcol/config.yaml
    depends_on:
      - elasticsearch

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  discovery-service:
    build:
      context: .
      dockerfile: discovery-service/Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/"]
      interval: 10s
      timeout: 5s
      retries: 5

  config-server:
    build:
      context: .
      dockerfile: config-server/Dockerfile
    depends_on:
      - discovery-service
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  gateway-service:
    build:
      context: .
      dockerfile: gateway-service/Dockerfile
    container_name: gateway-service
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_started
      redis:
        condition: service_started
      logstash:
        condition: service_started
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_CONFIG_IMPORT: ${SPRING_CONFIG_IMPORT}
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}

  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    env_file:
      - .env.docker
    container_name: order-service
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_started
      redis:
        condition: service_started
      logstash:
        condition: service_started
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    ports:
      - "8081:8081"

  restaurant-service:
    build:
      context: .
      dockerfile: restaurant-service/Dockerfile
    env_file:
      - .env.docker
    container_name: restaurant-service
    depends_on:
      postgres:
        condition: service_started
      logstash:
        condition: service_started
      otel-collector:
        condition: service_started
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    ports:
      - "8082:8082"

  delivery-service:
    build:
      context: .
      dockerfile: delivery-service/Dockerfile
    env_file:
      - .env.docker
    container_name: delivery-service
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_started
      logstash:
        condition: service_started
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    ports:
      - "8083:8083"

  tracking-service:
    build:
      context: .
      dockerfile: tracking-service/Dockerfile
    env_file:
      - .env.docker
    container_name: tracking-service
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_started
      logstash:
        condition: service_started
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    ports:
      - "8084:8084"

  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    env_file:
      - .env.docker
    container_name: notification-service
    depends_on:
      kafka:
        condition: service_started
      logstash:
        condition: service_started
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    ports:
      - "8085:8085"

volumes:
  pgdata:
  redisdata:
  esdata: